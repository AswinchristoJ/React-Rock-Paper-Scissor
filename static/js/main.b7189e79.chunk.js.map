{"version":3,"sources":["assets/images/botRock.png","assets/images/botPaper.png","assets/images/botScissor.png","assets/images/playerRock.png","assets/images/playerPaper.png","assets/images/playerScissor.png","assets/images/nyan-cat.gif","Components/PlayArea/Handholder/Handholder.js","Components/PlayArea/PlayArea.js","Components/UserControls/UserControls.js","Components/ScoreArea/ScoreArea.js","Components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","images","botPaper","botPaperImg","botRock","botRockImg","botScissor","botScissorImg","playerRock","playerRockImg","playerPaper","playerPaperImg","playerScissor","playerScissorImg","handHolder","props","tempClassName","spin","react_default","a","createElement","style","width","margin","fontWeight","header","className","src","hand","alt","objectFit","playArea","display","height","alignItems","justifyContent","Handholder_Handholder","bot","player","userControls","borderColor","background","borderRadius","padding","onFocus","clicked","value","onBlur","scoreArea","botTempClass","playerTempClass","botFaded","playerFaded","flexDirection","border","borderWidth","color","fontSize","botPoints","playerPoints","footer","marginTop","fontStyle","fontFamily","App","state","botScoreFade","playerScoreFade","botScore","playerScore","userControlClickHandler","prevSpinState","_this","setState","items","tempPlayerState","tempBotState","Math","floor","random","length","botValue","updatingScore","tempBotScore","tempPlayerScore","checkClose","closeText","close","_this2","this","setTimeout","Swal","fire","title","animation","backdrop","concat","img","then","e","window","location","reload","boxShadow","textShadow","ScoreArea_ScoreArea","PlayArea","UserControls","Footer","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b7189e79.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/botRock.697f18ae.png\";","module.exports = __webpack_public_path__ + \"static/media/botPaper.f13472d6.png\";","module.exports = __webpack_public_path__ + \"static/media/botScissor.98de83ea.png\";","module.exports = __webpack_public_path__ + \"static/media/playerRock.6dd82a39.png\";","module.exports = __webpack_public_path__ + \"static/media/playerPaper.2e9d9c69.png\";","module.exports = __webpack_public_path__ + \"static/media/playerScissor.1ff1e694.png\";","module.exports = __webpack_public_path__ + \"static/media/nyan-cat.9871e996.gif\";","import React from 'react';\r\n\r\nimport botRockImg from '../../../assets/images/botRock.png'\r\nimport botPaperImg from '../../../assets/images/botPaper.png'\r\nimport botScissorImg from '../../../assets/images/botScissor.png'\r\nimport playerRockImg from '../../../assets/images/playerRock.png'\r\nimport playerPaperImg from '../../../assets/images/playerPaper.png'\r\nimport playerScissorImg from '../../../assets/images/playerScissor.png'\r\n\r\nimport './Handholder.css';\r\n\r\nconst images = {\r\n    botPaper: botPaperImg,\r\n    botRock: botRockImg,\r\n    botScissor: botScissorImg,\r\n    playerRock: playerRockImg,\r\n    playerPaper: playerPaperImg,\r\n    playerScissor: playerScissorImg\r\n}\r\n\r\nconst handHolder = (props) => {\r\n\r\n    let tempClassName = ''\r\n\r\n    if (props.spin) {\r\n        tempClassName = \"image\"\r\n    } else {\r\n        tempClassName = ''\r\n    }\r\n\r\n    return (\r\n        <div style={{\r\n            width: \"25vw\",\r\n        }} >\r\n        <div style={{\r\n            margin:\"20px\",\r\n            fontWeight:\"bolder\",\r\n        }}>{props.header}</div>\r\n            <img className={tempClassName} src={images[props.hand]} alt={props.hand} style={{\r\n                objectFit: \"scale-down\",\r\n                width: \"inherit\"\r\n            }} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default handHolder;","import React from 'react';\r\n\r\nimport Handholder from './Handholder/Handholder';\r\n\r\nconst playArea = (props) =>{\r\n    return(\r\n        <div style={{\r\n            display:\"flex\",\r\n            height:\"30vh\",\r\n            alignItems:\"flex-start\",\r\n            justifyContent:\"space-around\"\r\n        }}>\r\n            <Handholder header=\"BOT\" spin={props.spin} hand={props.bot}/>\r\n            <p>vs</p>\r\n            <Handholder header=\"YOU\" spin={props.spin} hand={props.player}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default playArea;","import React from 'react';\r\n\r\nconst userControls = (props) =>{\r\n    return(\r\n        <button style={{\r\n            borderColor:\"black\",\r\n            background:\"border-box\",\r\n            borderRadius:\"3px\",\r\n            padding:\"10px\",\r\n            margin:\"2px\"\r\n        }} \r\n        onFocus={()=>props.clicked(props.value)}\r\n        onBlur={()=>props.clicked(null)}>{props.value}</button>\r\n    );\r\n}\r\n\r\nexport default userControls;","import React from 'react';\r\n\r\nimport './ScoreArea.css';\r\n\r\nconst scoreArea = (props) => {\r\n    let botTempClass = \"\"\r\n    let playerTempClass = \"\"\r\n\r\n    if (props.botFaded && props.playerFaded) {\r\n        botTempClass = \"fadeIn\"\r\n        playerTempClass = \"fadeIn\"\r\n    } else if (props.botFaded) {\r\n        botTempClass = \"fadeIn\"\r\n    } else if (props.playerFaded) {\r\n        playerTempClass = \"fadeIn\"\r\n    } else {\r\n        botTempClass = \"\"\r\n        playerTempClass = \"\"\r\n    }\r\n    return (\r\n        <div style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"space-between\",\r\n            border: \"ridge\",\r\n            borderColor: \"black\",\r\n            borderWidth: \"1px\",\r\n            borderRadius: \"3px\",\r\n            margin: \"0px\",\r\n            padding: \"20px 10px\"\r\n        }}>\r\n            <div>\r\n                <span>Score : <label\r\n                    style={{ color: \"red\", fontSize: \"xx-large\" }}\r\n                    className={botTempClass}>\r\n                    {props.botPoints}\r\n                </label> / 5</span>\r\n            </div>\r\n            <div>\r\n                <span>Score : <label\r\n                    style={{ color: \"blue\", fontSize: \"xx-large\" }}\r\n                    className={playerTempClass}>\r\n                    {props.playerPoints}\r\n                </label> / 5</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default scoreArea;","import React from 'react';\r\n\r\nconst footer = () => {\r\n    return (\r\n        <div style={{\r\n            fontSize:\"15px\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"self-start\",\r\n            padding: \"20px 10px\",\r\n            marginTop:\"15vh\",\r\n            fontWeight:\"400\",\r\n            color:\"#423b3b\",\r\n        }}>\r\n            <span>Aswin Christo</span>\r\n            <span style={{\r\n                fontStyle:\"italic\",\r\n                fontFamily:\"TimesNewRoman\"\r\n            }}>azooschristo@gmail.com</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default footer;","import React, { Component } from 'react';\r\nimport Swal from 'sweetalert2'\r\n\r\nimport PlayArea from './Components/PlayArea/PlayArea';\r\nimport UserControls from './Components/UserControls/UserControls';\r\nimport ScoreArea from './Components/ScoreArea/ScoreArea';\r\nimport img from './assets/images/nyan-cat.gif';\r\nimport Footer from './Components/Footer/Footer';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    spin: false,\r\n    botScoreFade: false,\r\n    playerScoreFade: false,\r\n    botScore: 0,\r\n    playerScore: 0,\r\n    bot: 'botRock',\r\n    player: 'playerRock',\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    setTimeout(()=>{ this.checkClose() }, 3000);\r\n  }\r\n\r\n  userControlClickHandler = (value) => {\r\n\r\n    let prevSpinState = this.state.spin\r\n    this.setState({\r\n      spin: !prevSpinState,\r\n      botScoreFade: false,\r\n      playerScoreFade: false\r\n    })\r\n\r\n    let items = [\"Rock\", \"Paper\", \"Scissor\"]\r\n    let tempPlayerState = 'player'\r\n    let tempBotState = items[Math.floor(Math.random() * items.length)]\r\n    let botValue = tempBotState\r\n    tempPlayerState = tempPlayerState + value\r\n    tempBotState = \"bot\" + tempBotState\r\n\r\n    if (value) {\r\n      this.setState({\r\n        player: tempPlayerState,\r\n        bot: tempBotState,\r\n      })\r\n\r\n      this.updatingScore(botValue, value)\r\n    }\r\n  }\r\n\r\n  updatingScore = (bot, player) => {\r\n\r\n    let tempBotScore = this.state.botScore\r\n    let tempPlayerScore = this.state.playerScore\r\n    if (bot === player) {\r\n      tempBotScore = tempBotScore + 1\r\n      tempPlayerScore = tempPlayerScore + 1\r\n      this.setState({\r\n        botScoreFade: true,\r\n        playerScoreFade: true,\r\n        botScore: tempBotScore,\r\n        playerScore: tempPlayerScore,\r\n      })\r\n    } else if ((bot === \"Rock\" && player === \"Scissor\") || (bot === \"Paper\" && player === \"Rock\") || (bot === \"Scissor\" && player === \"Paper\")) {\r\n      tempBotScore = tempBotScore + 1\r\n      this.setState({\r\n        botScoreFade: true,\r\n        botScore: tempBotScore,\r\n      })\r\n    } else if ((bot === \"Scissor\" && player === \"Rock\") || (bot === \"Rock\" && player === \"Paper\") || (bot === \"Paper\" && player === \"Scissor\")) {\r\n      tempPlayerScore = tempPlayerScore + 1\r\n      this.setState({\r\n        playerScoreFade: true,\r\n        playerScore: tempPlayerScore,\r\n      })\r\n    }\r\n  }\r\n\r\n  checkClose = () => {\r\n    let closeText = \"\"\r\n    if (this.state.botScore === 5 && this.state.playerScore === 5) {\r\n      closeText = \"The game is <<Drawn>>!!!\"\r\n      this.close(closeText)\r\n    } else if (this.state.botScore === 5) {\r\n      closeText = \"You Lose!!!...\\nthis time\"\r\n      this.close(closeText)\r\n    } else if (this.state.playerScore === 5) {\r\n      closeText = \"You Won!!!.....\\nHurraY!\"\r\n      this.close(closeText)\r\n    }\r\n  }\r\n\r\n  close(closeText) {\r\n    Swal.fire({\r\n      title: closeText,\r\n      animation: true,\r\n      width: 600,\r\n      padding: '3em',\r\n      backdrop: `\r\n        rgba(0,0,123,0.4)\r\n        url(${img})\r\n        center left\r\n        repeat\r\n      `\r\n    }).then((e) => {\r\n      if (e) {\r\n        window.location.reload()\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <span style={{\r\n          fontWeight: \"500\",\r\n          display: \"block\",\r\n          padding: \"15px 0px\",\r\n          fontSize: \"25px\",\r\n          boxShadow: \"0 0 5px black\",\r\n          textShadow: \"rgba(0, 0, 0, 0.22) 7px -2px 6px\"\r\n        }}>ROCK - PAPER - SCISSOR</span>\r\n        <ScoreArea\r\n          botPoints={this.state.botScore}\r\n          playerPoints={this.state.playerScore}\r\n          botFaded={this.state.botScoreFade}\r\n          playerFaded={this.state.playerScoreFade} />\r\n        <PlayArea\r\n          spin={this.state.spin}\r\n          bot={this.state.bot}\r\n          player={this.state.player} />\r\n        <div>\r\n          <UserControls value=\"Rock\" clicked={this.userControlClickHandler} />\r\n          <UserControls value=\"Paper\" clicked={this.userControlClickHandler} />\r\n          <UserControls value=\"Scissor\" clicked={this.userControlClickHandler} />\r\n        </div>\r\n        <Footer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}